import numpy as np
import pytest


def FmDefold(m, w):
    """
    Pade approximate Boys function Used by Xv, Guangxian.
    徐光宪; 黎乐民; 王德民. 量子化学：基本原理和从头计算法, 第二版.; 科学出版社: 北京, 2007. C.2 p.67
    :param m:
    :param w:
    :return: $F_m(w)$
    """
    if m == 0:
        if w < 16.3578:
            return ((
                            1.0 +
                            0.21327130243142 * w ** 1 +
                            0.0629344460255614 * w ** 2 +
                            0.00769838037756759 * w ** 3 +
                            0.00075843319712716 * w ** 4 +
                            5.64691197633667e-05 * w ** 5) /
                    (
                            1 +
                            0.879937801660182 * w ** 1 +
                            0.338450368470103 * w ** 2 +
                            0.0738522953299624 * w ** 3 +
                            0.0101431553402629 * w ** 4 +
                            0.000955528842975585 * w ** 5 +
                            7.20266520392572e-05 * w ** 6)) ** (0.5)
        else:
            return (1.2533141373155001 / ((2 * w) ** (0.5)))
    if m == 1:
        if w < 17.4646:
            return ((
                            0.4807498567691362 +
                            0.0295195994716045 * w ** 1 +
                            0.0128790985465415 * w ** 2 +
                            0.000998165499553218 * w ** 3 +
                            9.70927983276419e-05 * w ** 4 +
                            4.93839847029699e-06 * w ** 5) /
                    (
                            1 +
                            0.461403194579124 * w ** 1 +
                            0.108494164372449 * w ** 2 +
                            0.0171462934845042 * w ** 3 +
                            0.00196918657845508 * w ** 4 +
                            0.000160138863265254 * w ** 5 +
                            8.57708713007233e-06 * w ** 6)) ** (1.5)
        else:
            return (1.2533141373155001 / ((2 * w) ** (1.5)))
    if m == 2:
        if w < 15.2368:
            return ((
                            0.5253055608807534 +
                            -0.00575763488635418 * w ** 1 +
                            0.00731474973333076 * w ** 2 +
                            0.000251276149443393 * w ** 3 +
                            2.64336244559094e-05 * w ** 4) /
                    (
                            1 +
                            0.274754154712841 * w ** 1 +
                            0.0425364830353043 * w ** 2 +
                            0.00493902790955943 * w ** 3 +
                            0.000437251500927601 * w ** 4 +
                            2.88914662393981e-05 * w ** 5)) ** (2.5)
        else:
            return (3.7599424119465006 / ((2 * w) ** (2.5)))
    if m == 3:
        if w < 16.0419:
            return ((
                            0.5735131987446477 +
                            -0.0290110430424666 * w ** 1 +
                            0.00561884370781462 * w ** 2 +
                            3.01628267382713e-05 * w ** 3 +
                            1.10671035361856e-05 * w ** 4) /
                    (
                            1 +
                            0.171637608242892 * w ** 1 +
                            0.0187571417256877 * w ** 2 +
                            0.00178536829675118 * w ** 3 +
                            0.000137360778130936 * w ** 4 +
                            7.91915206883054e-06 * w ** 5)) ** (3.5)
        else:
            return (18.799712059732503 / ((2 * w) ** (3.5)))
    if m == 4:
        if w < 16.8955:
            return ((
                            0.613685849032916 +
                            -0.0452693111179624 * w ** 1 +
                            0.00490070062899003 * w ** 2 +
                            -5.61789719979307e-05 * w ** 3 +
                            5.50814626951998e-06 * w ** 4) /
                    (
                            1 +
                            0.108051989937231 * w ** 1 +
                            0.00855924943430755 * w ** 2 +
                            0.000724968571389473 * w ** 3 +
                            5.02338223156067e-05 * w ** 4 +
                            2.49107837399141e-06 * w ** 5)) ** (4.5)
        else:
            return (131.5979844181275 / ((2 * w) ** (4.5)))
    if m == 5:
        if w < 17.7822:
            return ((
                            0.6466300385008377 +
                            -0.0566143259316101 * w ** 1 +
                            0.00455916894577203 * w ** 2 +
                            -8.94152721395639e-05 * w ** 3 +
                            3.28096732308082e-06 * w ** 4) /
                    (
                            1 +
                            0.0662932958471386 * w ** 1 +
                            0.00383724443872493 * w ** 2 +
                            0.000327167659811839 * w ** 3 +
                            2.10430437682548e-05 * w ** 4 +
                            8.83562935089333e-07 * w ** 5)) ** (5.5)
        else:
            return (1184.3818597631475 / ((2 * w) ** (5.5)))
    if m == 6:
        if w < 15.8077:
            return ((
                            0.6739444475794731 +
                            -0.0503249167534352 * w ** 1 +
                            0.00273135625430953 * w ** 2 +
                            -3.107336248191e-05 * w ** 3) /
                    (
                            1 +
                            0.0586609328033371 * w ** 1 +
                            0.00194044691497128 * w ** 2 +
                            0.000109442742502192 * w ** 3 +
                            6.13406236401726e-06 * w ** 4)) ** (6.5)
        else:
            return (13028.200457394623 / ((2 * w) ** (6.5)))
    if m == 7:
        if w < 16.5903:
            return ((
                            0.6969278698605402 +
                            -0.0548201062615785 * w ** 1 +
                            0.00253099908233175 * w ** 2 +
                            -3.33589469427863e-05 * w ** 3) /
                    (
                            1 +
                            0.0389873128779298 * w ** 1 +
                            0.000569890860832729 * w ** 2 +
                            4.22187129333708e-05 * w ** 3 +
                            2.86010059144633e-06 * w ** 4)) ** (7.5)
        else:
            return (169366.60594613012 / ((2 * w) ** (7.5)))
    if m == 8:
        if w < 17.3336:
            return ((
                            0.7165414254774158 +
                            -0.058161800607816 * w ** 1 +
                            0.00238525529084601 * w ** 2 +
                            -3.29989020317093e-05 * w ** 3) /
                    (
                            1 +
                            0.0240929282666615 * w ** 1 +
                            -0.000202677647499956 * w ** 2 +
                            1.1982067597446e-05 * w ** 3 +
                            1.45762086904409e-06 * w ** 4)) ** (8.5)
        else:
            return (2540499.089191952 / ((2 * w) ** (8.5)))
    if m == 9:
        if w < 15.6602:
            return ((
                            0.7334902710845949 +
                            -0.03348439939014 * w ** 1 +
                            0.000846637494147059 * w ** 2) /
                    (
                            1 +
                            0.0495875606944471 * w ** 1 +
                            0.000946642302340943 * w ** 2 +
                            1.0836777224979e-05 * w ** 3)) ** (9.5)
        else:
            return (43188484.51626318 / ((2 * w) ** (9.5)))
    if m == 10:
        if w < 16.5258:
            return ((
                            0.7482976009670683 +
                            -0.0335292171805959 * w ** 1 +
                            0.000749168957990503 * w ** 2) /
                    (
                            1 +
                            0.04214922932021683 * w ** 1 +
                            0.000582840985360327 * w ** 2 +
                            2.37676790577455e-06 * w ** 3)) ** (10.5)
        else:
            return (820581205.8090004 / ((2 * w) ** (10.5)))
    if m == 11:
        if w < 17.5395:
            return ((
                            0.7613579445345817 +
                            -0.0332669773790348 * w ** 1 +
                            0.000668720489602687 * w ** 2) /
                    (
                            1 +
                            0.0363057685289467 * w ** 1 +
                            0.000345646100984643 * w ** 2 +
                            -1.9087233037345e-06 * w ** 3)) ** (11.5)
        else:
            return (17232205321.989006 / ((2 * w) ** (11.5)))
    if m == 12:
        if w < 18.5783:
            return ((
                            0.7729738455277437 +
                            -0.0326241966410798 * w ** 1 +
                            0.000598705175467956 * w ** 2) /
                    (
                            1 +
                            0.0318680048277695 * w ** 1 +
                            0.000202419662347765 * w ** 2 +
                            -3.62095173837973e-06 * w ** 3)) ** (12.5)
        else:
            return (396340722405.7472 / ((2 * w) ** (12.5)))
    if m == 13:
        if w < 19.6511:
            return ((
                            0.7833810369372723 +
                            -0.0317754368014894 * w ** 1 +
                            0.000537678595933584 * w ** 2) /
                    (
                            1 +
                            0.0284036027081815 * w ** 1 +
                            0.000113673420662576 * w ** 2 +
                            -4.16076810552774e-06 * w ** 3)) ** (13.5)
        else:
            return (9908518060143.68 / ((2 * w) ** (13.5)))
    if m == 14:
        if w < 20.7839:
            return ((
                            0.7927659082294096 +
                            -0.0308755854748829 * w ** 1 +
                            0.000485046451960769 * w ** 2) /
                    (
                            1 +
                            0.0255694625434059 * w ** 1 +
                            5.4201019205508e-05 * w ** 2 +
                            -4.24759498527876e-06 * w ** 3)) ** (14.5)
        else:
            return (267529987623879.34 / ((2 * w) ** (14.5)))
    if m == 15:
        if w < 21.9998:
            return ((
                            0.8012778112031649 +
                            -0.03001438066719997 * w ** 1 +
                            0.000439983032427912 * w ** 2) /
                    (
                            1 +
                            0.0231478878674366 * w ** 1 +
                            1.05546581596674e-05 * w ** 2 +
                            -4.18932957034726e-06 * w ** 3)) ** (15.5)
        else:
            return (7758369641092501.0 / ((2 * w) ** (15.5)))
    if m == 16:
        if w < 20.9225:
            return ((
                            0.8090378723962302 +
                            -0.0288346417991609 * w ** 1 +
                            0.000397161796318408 * w ** 2) /
                    (
                            1 +
                            0.0215021933120724 * w ** 1 +
                            -1.2859245745395e-06 * w ** 2 +
                            -3.62120651688135e-06 * w ** 3)) ** (16.5)
        else:
            return (2.4050945887386752e+17 / ((2 * w) ** (16.5)))
    
    if m > 16:
        return (1/2*w) * ( (2*m-1)*FmDefold(m-1,w) - np.exp(-w))
    raise NotImplementedError(
        "Unknown arguments: {} {}".format(m,w)
    )

if __name__ == '__main__':
    import numpy as np
    import scipy 
    from tqdm import tqdm

    x = np.linspace(0.0001, 10, 1000000)
    m = 1
    
    import time
    import matplotlib.pyplot as plt
    
    y2 = []

    time_start = time.time()
    for item in x:
        y2.append(
            scipy.special.gamma(m + 0.5) * scipy.special.gammainc(m + 0.5, item) / (2 * item ** (m + 0.5))
        )
    time_end = time.time()

    time2 = time_end - time_start
    print('Builtin method [time cost]', time_end - time_start, 's')
    y3 = []
    
    time_start = time.time()
    
    for item in tqdm(x):
        y3.append(
            FmDefold(m, item)
        )
    time_end = time.time()

    time3 = time_end - time_start
    print('FmDefold method [time cost]', time_end - time_start, 's')
    if time3 != 0:
        print(time2 / time3 + 0.000000000000000000000000000000000000000001, "times")

    yy = np.array(y2) - np.array(y3)
    try:
        print("MAX ERROR:{}".format(max(abs(yy))))
    except TypeError:
        pass
    plt.plot(x, y2)
    plt.plot(x, y3)
    plt.show()